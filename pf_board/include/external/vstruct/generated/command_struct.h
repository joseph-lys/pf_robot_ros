/// *** THIS FILE IS AUTO GENERATED BY vstruct_gen_header.py ***
/// 
/// command_struct.py
///  command_struct.py
/// 
/// copyright Joseph Lee Yuan Sheng 2019
/// 
/// 
/// 
#ifndef COMMAND_STRUCT_H_
#define COMMAND_STRUCT_H_
#include "vstruct.h"



///  CommandStruct
/// 
///     Command Struct Data
/// 
/// [0].0               : enabled (bool)
/// [0].1   ... [0].6   : size (uint8_t : 6)
/// [0].7               : pad1 (padding[1])
/// [1].0   ... [20].7  : ids (uint8_t[32] : 5)
/// [21].0              : pad2 (padding[0])
/// [21].0  ... [60].7  : position (uint16_t[32] : 10)
/// [61].0  ... [108].7 : speed (uint16_t[32] : 12)
/// [109].0             : pad3 (padding[0])
struct CommandStruct : public vstruct::VStruct {
  /// motor is enabled
  typename vstruct::BoolItem<vstruct::Root>::type enabled{*this};
  
  /// number of motors
  typename vstruct::LEItem<decltype(enabled), uint8_t, 6>::type size{*this};
  
  /// pad so next element starts on a new byte
  typename vstruct::AlignPad<decltype(size), 1>::type pad1;
  
  /// motor ids
  typename vstruct::LEArray<decltype(pad1), uint8_t, 5, 32>::type ids{*this};
  
  /// pad so next element starts on a new byte
  typename vstruct::AlignPad<decltype(ids), 1>::type pad2;
  
  /// goal position
  typename vstruct::LEArray<decltype(pad2), uint16_t, 10, 32>::type position{*this};
  
  /// moving speed
  typename vstruct::LEArray<decltype(position), uint16_t, 12, 32>::type speed{*this};
  
  /// pad so next element starts on a new byte
  typename vstruct::AlignPad<decltype(speed), 1>::type pad3;
  
};  // CommandStruct





#endif  // COMMAND_STRUCT_H_

