/// *** THIS FILE IS AUTO GENERATED BY vstruct_gen_header.py ***
/// 
/// feedback_struct.py
///  feedback_struct.py
/// 
/// copyright Joseph Lee Yuan Sheng 2019
/// 
/// 
/// 
#ifndef FEEDBACK_STRUCT_H_
#define FEEDBACK_STRUCT_H_
#include "vstruct.h"



///  FeedbackStruct
/// 
///     Feedback Struct Data
/// 
/// [0].0   ... [3].7   : system_time (uint32_t : 32)
/// [4].0   ... [4].7   : voltage (uint8_t : 8)
/// [5].0               : enabled (bool)
/// [5].1   ... [5].6   : size (uint8_t : 6)
/// [5].7               : pad1 (padding[1])
/// [6].0   ... [37].7  : status (uint8_t[32] : 8)
/// [38].0  ... [77].7  : position (uint16_t[32] : 10)
/// [78].0  ... [125].7 : speed (uint16_t[32] : 12)
/// [126].0 ... [173].7 : load (uint16_t[32] : 12)
/// [174].0             : pad2 (padding[0])
/// [174].0 ... [185].7 : ain (uint16_t[8] : 12)
struct FeedbackStruct : public vstruct::VStruct {
  /// system time on hardware board
  typename vstruct::LEItem<vstruct::Root, uint32_t, 32>::type system_time{*this};
  
  /// motor voltage retrieved from one of the motors
  typename vstruct::LEItem<decltype(system_time), uint8_t, 8>::type voltage{*this};
  
  /// motor is enabled
  typename vstruct::BoolItem<decltype(voltage)>::type enabled{*this};
  
  /// number of motors
  typename vstruct::LEItem<decltype(enabled), uint8_t, 6>::type size{*this};
  
  /// pad so next element starts on a new byte
  typename vstruct::AlignPad<decltype(size), 1>::type pad1;
  
  /// The following arrays shall be following the motor ids of the CommandStruct
  /// feedback status from motor
  typename vstruct::LEArray<decltype(pad1), uint8_t, 8, 32>::type status{*this};
  
  /// present position
  typename vstruct::LEArray<decltype(status), uint16_t, 10, 32>::type position{*this};
  
  /// present speed
  typename vstruct::LEArray<decltype(position), uint16_t, 12, 32>::type speed{*this};
  
  /// present position
  typename vstruct::LEArray<decltype(speed), uint16_t, 12, 32>::type load{*this};
  
  /// pad so next element starts on a new byte
  typename vstruct::AlignPad<decltype(load), 1>::type pad2;
  
  /// value of analog inputs
  typename vstruct::LEArray<decltype(pad2), uint16_t, 12, 8>::type ain{*this};
  
};  // FeedbackStruct





#endif  // FEEDBACK_STRUCT_H_

